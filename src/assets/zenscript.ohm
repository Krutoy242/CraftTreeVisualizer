ZenScript {

  Statement = Expression ";"?

  Expression 
    = ("-")    Expression  -- unary
    | LeftHandSideExpression

  LeftHandSideExpression 
    = Expression "as" anyType -- typed
    | Expression "*" Expression -- mult
    | Expression "|" Expression -- or
    | CallExpression
    | MemberExpression

  anyType = "bool"|"short"|"lond"|"float"|"double"|"byte"

  CallExpression = MemberExpression Arguments

  MemberExpression 
    = MemberExpression "[" Expression "]"  -- arrayRefExp
    | PrimaryExpression "." identifier  -- propRefExp
    | PrimaryExpression

  PrimaryExpression 
    = identifier
    | literal
    | ArrayLiteral
    | ObjectLiteral
    | BracketHandler
    | "(" Expression ")"  -- parenExpr

    literal = nullLiteral | booleanLiteral | numericLiteral
          | stringLiteral
  nullLiteral = "null" ~identifierPart
  booleanLiteral = ("true" | "false") ~identifierPart
  numericLiteral = number

  ArrayLiteral = "[" ListOf<Expression, ","> "]"

  Arguments = "(" ArgumentsList ")"
  ArgumentsList = ListOf<Expression, ",">

  Argument = stringLiteral
    | BracketHandler

  BracketHandler = "<" anyBrHLetter+ ">"

  anyBrHLetter = ~(">") any

  ObjectLiteral 
    = "{" "}" -- empty
    |"{" ListOf<PropertyAssignment, ","> "}"              -- noTrailingComma
    | "{" NonemptyListOf<PropertyAssignment, ","> "," "}"  -- trailingComma

  PropertyAssignment = PropertyName ":" Expression

  PropertyName = identifier
               | stringLiteral
               | number

  stringLiteral
    = "\"" doubleStringCharacter* "\""

  doubleStringCharacter = ~("\"" | "\\") any

  identifier (an identifier) = identifierStart identifierPart*

  identifierStart = letter | "$" | "_"
  identifierPart = identifierStart
                 | "\u200C" | "\u200D" | digit

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
}